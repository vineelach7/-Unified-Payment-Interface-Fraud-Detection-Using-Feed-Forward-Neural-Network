# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OCidaJ59jIBupgD5VrezJkh-zKYjRZCV
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit

!pip install flask_cors

from tensorflow.keras.models import load_model

# Load the model
model = load_model('/content/drive/MyDrive/UPI_FRAUD.h5')  # or .keras

# Optional: compile only if you're training or evaluating
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Use it for prediction or evaluation
# Example (replace with your actual test data):
# predictions = model.predict(x_test)
# loss, accuracy = model.evaluate(x_test, y_test)

import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler

# Load trained model
model = load_model("/content/drive/MyDrive/UPI_FRAUD.h5")

# Load scaler
scaler = StandardScaler()

# HTML & CSS
st.markdown("""
    <style>
        .title {
            background-color: #0a3d62;
            color: white;
            text-align: center;
            padding: 15px;
            border-radius: 10px;
        }
        .section {
            font-size: 20px;
            font-weight: 600;
            color: #34495e;
        }
        .result {
            font-size: 20px;
            font-weight: bold;
        }
        .fraud { color: red; }
        .legit { color: green; }
    </style>
    <div class="title">
        <h1>üîê UPI Fraud Detection System</h1>
    </div>
""", unsafe_allow_html=True)

st.markdown('<p class="section">Enter Transaction Details</p>', unsafe_allow_html=True)

# Manual Inputs
amount = st.number_input("Transaction Amount", min_value=0, value=1000)
category = st.selectbox("Transaction Category", ["Electronics", "Restaurants", "Groceries", "Clothing", "Entertainment", "Utilities", "Travel"])
transaction_type = st.selectbox("Transaction Type", ["P2M", "P2P"])
latitude = st.text_input("Latitude", "0.0")
longitude = st.text_input("Longitude", "0.0")
avg_amount = st.number_input("Average Transaction Amount", min_value=0, value=1000)
unusual_loc = st.checkbox("Unusual Location")
unusual_amt = st.checkbox("Unusual Amount")
new_device = st.checkbox("New Device")
failed_logins = st.number_input("Failed Login Attempts", min_value=0, value=0)

# Convert to DataFrame
data = pd.DataFrame([[
    amount,
    category,
    transaction_type,
    float(latitude),
    float(longitude),
    avg_amount,
    int(unusual_loc),
    int(unusual_amt),
    int(new_device),
    failed_logins
]], columns=[
    "Transaction Amount", "Transaction Category", "Transaction Type",
    "Latitude", "Longitude", "Average Transaction Amount",
    "Unusual Location", "Unusual Amount", "New Device", "Failed Login Attempts"
])

# Encode categorical variables manually (same as training: label encoding)
category_map = {"Electronics": 0, "Restaurants": 1, "Groceries": 2, "Clothing": 3, "Entertainment": 4, "Utilities": 5, "Travel": 6}
transaction_type_map = {"P2M": 0, "P2P": 1}
data["Transaction Category"] = data["Transaction Category"].map(category_map)
data["Transaction Type"] = data["Transaction Type"].map(transaction_type_map)

# Normalize numerical data (should be done using the same logic as training)
numerical_cols = [
    "Transaction Amount", "Transaction Category", "Transaction Type",
    "Latitude", "Longitude", "Average Transaction Amount",
    "Unusual Location", "Unusual Amount", "New Device", "Failed Login Attempts"
]

# Fit scaler only for demonstration. In production, save and reuse trained scaler.
data[numerical_cols] = scaler.fit_transform(data[numerical_cols])

# Prediction
if st.button("Predict Transaction"):
    prediction = model.predict(data)[0][0]
    result = int(prediction > 0.5)
    if result == 1:
        st.markdown('<p class="result fraud">üö® This transaction is Fraudulent!</p>', unsafe_allow_html=True)
    else:
        st.markdown('<p class="result legit">‚úÖ This transaction is Legitimate.</p>', unsafe_allow_html=True)

# CSV Upload
st.markdown('<p class="section">Or Upload a CSV File</p>', unsafe_allow_html=True)
uploaded_file = st.file_uploader("Upload CSV", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.dataframe(df.head())

    df["Transaction Category"] = df["Transaction Category"].map(category_map)
    df["Transaction Type"] = df["Transaction Type"].map(transaction_type_map)
    df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

    predictions = model.predict(df[numerical_cols])
    df['Prediction'] = np.where(predictions > 0.5, "Fraud", "Legit")

    st.markdown('<p class="section">Prediction Results</p>', unsafe_allow_html=True)
    st.dataframe(df[["Prediction"]])